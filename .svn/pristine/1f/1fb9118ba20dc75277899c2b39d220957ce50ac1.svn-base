package com.xysoft.admin.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.xysoft.admin.service.LightingInfoService;
import com.xysoft.dao.TFitDsxxDao;
import com.xysoft.entity.TFitDsxx;
import com.xysoft.support.PageParam;
import com.xysoft.support.Pager;
import com.xysoft.util.JsonUtil;
import com.xysoft.util.NullUtils;

@Component
public class LightingInfoServiceImpl implements LightingInfoService{
	
	@Resource
	private TFitDsxxDao tFitDsxxDao;
	
	@Transactional(readOnly = true)
	public Map<String, Object> toList() {
		Map<String,Object> model =new HashMap<String,Object>();
		model.put("model", "admin/Lighting/Lighting_list");
		return model;		
	}
	
	@Transactional(readOnly = true)
	public String toData(PageParam page, String keyword) {
		Pager<List<Map<String,Object>>> pager = this.tFitDsxxDao.getTFitDsxxs(page, keyword);
		return JsonUtil.toStringFromObject(pager.putMapObject());
	}
	
	@Transactional(readOnly = true)
	public Map<String, Object> addLighting() {
		Map<String,Object> model = new HashMap<String,Object>();
		return model;
	}

	@Transactional(readOnly = true)
	public Map<String, Object> editLighting(String id) {
		Map<String,Object> model = new HashMap<String,Object>();
		if(NullUtils.isNotEmpty(id)){
			TFitDsxx tFitDsxx = this.tFitDsxxDao.getTFitDsxx(id);
			if(tFitDsxx != null){
			   model.put("data", tFitDsxx);
			}
		}
		model.put("model", "admin/Lighting/Lighting_input");
		return model;
	}

	@SuppressWarnings("unchecked")
	@Transactional
	public String saveLighting(TFitDsxx param) {
		TFitDsxx tFitDsxx = null;
		if(NullUtils.isEmpty(param.getDsxxid())){
			tFitDsxx = new TFitDsxx();
		}
		else{
			tFitDsxx = this.tFitDsxxDao.getTFitDsxx(param.getDsxxid());
		}
		BeanUtils.copyProperties(param, tFitDsxx, new String[] {"Dsxxid", "cjsj"});
		this.tFitDsxxDao.saveTFitDsxx(tFitDsxx);
		return JsonUtil.toRes("保存成功");
	}

	@SuppressWarnings("unchecked")
	@Transactional
	public String deleteLighting(String id) {
		TFitDsxx tFitDsxx = null;
		if(NullUtils.isEmpty(id)){
			return JsonUtil.toResOfFail("删除失败");
		}
		else{
			tFitDsxx = this.tFitDsxxDao.getTFitDsxx(id);
			this.tFitDsxxDao.deleteTFitDsxx(tFitDsxx);
		}
		return JsonUtil.toRes("删除成功");
	}

}
